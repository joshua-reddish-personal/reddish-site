import * as cdk from 'aws-cdk-lib';
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as path from 'path';
import * as iam from 'aws-cdk-lib/aws-iam';

export class mediaReview extends cdk.Stack {
    constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {
        super(scope, id, props);

        const vpcId = process.env.CDK_VPC_ID || 'default-vpc-id';
        const subnetIds = (process.env.CDK_SUBNET_IDS || '').split(',');

        const vpc = ec2.Vpc.fromVpcAttributes(this, 'ExistingVpc', {
            vpcId: vpcId,
            availabilityZones: ['us-east-1a', 'us-east-1b'], // Specify the availability zones of your VPC
        });

        const securityGroup = new ec2.SecurityGroup(this, 'MySecurityGroup', {
            vpc,
            allowAllOutbound: true,
        });

        securityGroup.addIngressRule(ec2.Peer.ipv4('192.168.1.180/32'), ec2.Port.tcp(80)); // Replace 'your-ip-address' with your actual IP address  

        const privateSubnets = subnetIds.map((subnetId) => ec2.Subnet.fromSubnetId(this, `PrivateSubnet-${subnetId}`, subnetId));

        // Create an IAM role for the lambda
        const lambdaRole = new iam.Role(this, 'LambdaRole', {
            assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
        });

        // Define the inline policy
        const inlinePolicy = new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['dynamodb:PutItem', 'dynamodb:GetItem', 'dynamodb:UpdateItem', 'dynamodb:DeleteItem', 'dynamodb:Query', 'dynamodb:Scan', 'dynamodb:BatchGetItem', 'dynamodb:BatchWriteItem'],
            resources: ['arn:aws:dynamodb:us-east-1:xxxx:table/mediaTable'],
        });

        // Attach the inline policy to the IAM role
        lambdaRole.addToPolicy(inlinePolicy);


        // Create the Lambda function
        const lambdaFunction = new lambda.Function(this, 'AddMovieToDynamoFunction', {
            functionName: 'addMovieToDynamo',
            runtime: lambda.Runtime.NODEJS_18_X,
            handler: 'index.handler',
            code: lambda.Code.fromAsset(path.resolve(__dirname, 'lambdas', 'addMovieToDynamo')),
            vpc,
            vpcSubnets: { subnets: privateSubnets },
            role: lambdaRole,
        });

        // Create the API Gateway
        const api = new apigateway.RestApi(this, 'MoviesApi', {
            restApiName: 'Movies API',
        });

        // Add a resource and method to the API
        const resource = api.root.addResource('addMovieToDynamo');
        resource.addMethod('POST', new apigateway.LambdaIntegration(lambdaFunction));

        // Create the usage plan
        const usagePlan = new apigateway.UsagePlan(this, 'MyUsagePlan', {
            name: 'MyUsagePlan',
            apiStages: [
                {
                    api: api,
                    stage: api.deploymentStage,
                },
            ],
        });

        const apiKey = new apigateway.ApiKey(this, 'MyApiKey', {
            apiKeyName: 'MyAPIKey',
        });

        // Associate the usage plan with the API key
        usagePlan.addApiKey(apiKey);

        // Associate the usage plan with the API
        usagePlan.addApiStage({
            stage: api.deploymentStage,
        });

        // Output the API Gateway endpoint URL
        new cdk.CfnOutput(this, 'ApiGatewayEndpoint', {
            value: api.url,
        });
    }
}