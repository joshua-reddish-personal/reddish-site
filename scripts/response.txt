When using AWS Cloud Development Kit (CDK) to script infrastructure, you will need to organize your app into stacks -- each stack can define a part of the overall infrastructure. Below, I outline a folder structure for your CDK app and follow it with Python CDK code snippet to create a CloudFront distribution pointing to an S3 bucket for serving static frontend files.

### Folder Structure

The folder structure for your CDK app could look something like this:

```
/my-cdk-app/
│
├── app.py                  # Entry point for the CDK app
│
├── cdk.json                # Contains configuration for the CDK app
│
├── requirements.txt        # Python packages required
│
├── .env                    # Environment variables (optional)
│
├── lib/                    # Python packages for your stacks
│   │
│   ├── dynamodb_stack.py   # Stack for DynamoDB table
│   ├── cloudfront_s3_stack.py  # Stack for CloudFront and S3
│   └── apigateway_lambda_stack.py # Stack for API Gateway and Lambda
│
└── resources/              # Static resources, IAM policy documents, etc.
```

### Installing Dependencies

Before you get started, make sure you have the AWS CDK installed and Python 3.x. You'll also need to install the necessary AWS CDK libraries for your project:

```bash
pip install aws-cdk.aws-s3 aws-cdk.aws-cloudfront aws-cdk.aws-dynamodb aws-cdk.aws-lambda aws-cdk.aws-apigateway
```

Add these to your `requirements.txt` for easy setup:

```
aws-cdk.core
aws-cdk.aws-s3
aws-cdk.aws-cloudfront
aws-cdk.aws-dynamodb
aws-cdk.aws-lambda
aws-cdk.aws-apigateway
```

### CloudFront-S3 CDK Script

Here is an example Python script (`cloudfront_s3_stack.py`) that defines a stack for creating an S3 bucket and a CloudFront distribution:

```python
from aws_cdk import aws_s3 as s3
from aws_cdk import aws_cloudfront as cloudfront
from aws_cdk import aws_cloudfront_origins as origins
from aws_cdk import core as cdk

class CloudFrontS3Stack(cdk.Stack):

    def __init__(self, scope: cdk.Construct, id: str, **kwargs) -> None:
        super().__init__(scope, id, **kwargs)

        # Create an S3 bucket
        bucket = s3.Bucket(
            self, "MyFrontEndBucket",
            website_index_document="index.html",
            public_read_access=True,
            removal_policy=cdk.RemovalPolicy.DESTROY # Adjust policy as needed
        )

        # Create a CloudFront distribution pointing to the S3 bucket
        distribution = cloudfront.Distribution(
            self, "MyDistribution",
            default_behavior=cloudfront.BehaviorOptions(
                origin=origins.S3Origin(bucket),
                viewer_protocol_policy=cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS
            ),
            default_root_object='index.html',
        )

        # Output the CloudFront distribution domain name
        cdk.CfnOutput(self, "DistributionDomainName", value=distribution.distribution_domain_name)
```

### Integrating with the CDK App

Lastly, make sure your `app.py` is set up to include the above stack:

```python
#!/usr/bin/env python3

from aws_cdk import core as cdk
from lib.cloudfront_s3_stack import CloudFrontS3Stack

app = cdk.App()
CloudFrontS3Stack(app, "CloudFrontS3Stack")

app.synth()
```

This setup should give you a good starting point for scripting the rest of your infrastructure (DynamoDB table, API Gateway, Lambda, etc.) using AWS CDK and Python.